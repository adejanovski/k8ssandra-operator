package cassandra

import (
	"testing"

	"k8s.io/utils/pointer"

	"github.com/Jeffail/gabs"
	api "github.com/k8ssandra/k8ssandra-operator/apis/k8ssandra/v1alpha1"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"k8s.io/apimachinery/pkg/api/resource"
)

func TestApplySystemReplication(t *testing.T) {
	type test struct {
		name        string
		dcConfig    *DatacenterConfig
		replication SystemReplication
		want        *DatacenterConfig
	}

	tests := []test{
		{
			name:     "single-dc with no jvm options",
			dcConfig: &DatacenterConfig{},
			replication: SystemReplication{
				Datacenters:       []string{"dc1"},
				ReplicationFactor: 3,
			},
			want: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						AdditionalOptions: []string{
							SystemReplicationDcNames + "=dc1",
							SystemReplicationFactor + "=3",
						},
					},
				},
			},
		},
		{
			name: "sing-dc with jvm options",
			dcConfig: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						HeapSize: parseResource("1024Mi"),
					},
				},
			},
			replication: SystemReplication{
				Datacenters:       []string{"dc1"},
				ReplicationFactor: 3,
			},
			want: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						HeapSize: parseResource("1024Mi"),
						AdditionalOptions: []string{
							SystemReplicationDcNames + "=dc1",
							SystemReplicationFactor + "=3",
						},
					},
				},
			},
		},
		{
			name:     "multi-dc with no jvm options",
			dcConfig: &DatacenterConfig{},
			replication: SystemReplication{
				Datacenters:       []string{"dc1", "dc2", "dc3"},
				ReplicationFactor: 3,
			},
			want: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						AdditionalOptions: []string{
							SystemReplicationDcNames + "=dc1,dc2,dc3",
							SystemReplicationFactor + "=3",
						},
					},
				},
			},
		},
		{
			name: "multi-dc with jvm options",
			dcConfig: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						HeapSize: parseResource("1024Mi"),
					},
				},
			},
			replication: SystemReplication{
				Datacenters:       []string{"dc1", "dc2", "dc3"},
				ReplicationFactor: 3,
			},
			want: &DatacenterConfig{
				CassandraConfig: api.CassandraConfig{
					JvmOptions: api.JvmOptions{
						HeapSize: parseResource("1024Mi"),
						AdditionalOptions: []string{
							SystemReplicationDcNames + "=dc1,dc2,dc3",
							SystemReplicationFactor + "=3",
						},
					},
				},
			},
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			ApplySystemReplication(tc.dcConfig, tc.replication)
			require.Equal(t, tc.want, tc.dcConfig)
		})
	}
}

func TestCreateJsonConfig(t *testing.T) {
	type test struct {
		name             string
		cassandraVersion string
		config           api.CassandraConfig
		got              []byte
		want             string
	}

	heapSize := resource.MustParse("1024Mi")

	tests := []test{
		{
			name:             "[4.0.0] concurrent_reads, concurrent_writes, concurrent_counter_writes",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					ConcurrentReads:         pointer.Int(8),
					ConcurrentWrites:        pointer.Int(16),
					ConcurrentCounterWrites: pointer.Int(4),
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16,
                "concurrent_reads": 8,
                "concurrent_writes": 16,
                "concurrent_counter_writes": 4
              }
            }`,
		},
		{
			name:             "[3.11.11] heap size",
			cassandraVersion: "3.11.11",
			config: api.CassandraConfig{
				JvmOptions: api.JvmOptions{
					HeapSize: &heapSize,
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 256
              },
              "jvm-options": {
                "initial_heap_size": 1073741824,
                "max_heap_size": 1073741824
              }
            }`,
		},
		{
			name:             "[4.0.0] heap size",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				JvmOptions: api.JvmOptions{
					HeapSize: &heapSize,
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16
              },
              "jvm-server-options": {
                "initial_heap_size": 1073741824,
                "max_heap_size": 1073741824
              }
            }`,
		},
		{
			name:             "[4.0.0] concurrent_reads and concurrent_writes with system replication",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					ConcurrentReads:  pointer.Int(8),
					ConcurrentWrites: pointer.Int(16),
				},
				JvmOptions: api.JvmOptions{
					AdditionalOptions: []string{
						SystemReplicationDcNames + "=dc1,dc2,dc3",
						SystemReplicationFactor + "=3",
					},
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16,
                "concurrent_reads": 8,
                "concurrent_writes": 16
              },
              "cassandra-env-sh": {
                "additional-jvm-opts": [
                  "-Dcassandra.system_distributed_replication_dc_names=dc1,dc2,dc3", 
                  "-Dcassandra.system_distributed_replication_per_dc=3"
                ]
              }
            }`,
		},
		{
			name:             "[4.0.0] auto_snapshot, memtable_flush_writers, commitlog_segment_size_in_mb",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					AutoSnapshot:             pointer.Bool(true),
					MemtableFlushWriters:     pointer.Int(10),
					CommitlogSegmentSizeInMb: pointer.Int(8192),
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 16,
                "auto_snapshot": true,
                "memtable_flush_writers": 10,
                "commitlog_segment_size_in_mb": 8192
              }
            }`,
		},
		{
			name:             "[4.0.0] concurrent_compactors, compaction_throughput_mb_per_sec, sstable_preemptive_open_interval_in_mb",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					ConcurrentCompactors:              pointer.Int(4),
					CompactionThroughputMbPerSec:      pointer.Int(64),
					SstablePreemptiveOpenIntervalInMb: pointer.Int(0),
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 16,
                "concurrent_compactors": 4,
                "compaction_throughput_mb_per_sec": 64,
                "sstable_preemptive_open_interval_in_mb": 0
              }
            }`,
		},
		{
			name:             "[4.0.0] key_cache_size_in_mb, counter_cache_size_in_mb, prepared_statements_cache_size_mb, slow_query_log_timeout_in_ms",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					KeyCacheSizeInMb:              pointer.Int(100),
					CounterCacheSizeInMb:          pointer.Int(50),
					PreparedStatementsCacheSizeMb: pointer.Int(180),
					SlowQueryLogTimeoutInMs:       pointer.Int(500),
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 16,
                "key_cache_size_in_mb": 100,
                "counter_cache_size_in_mb": 50,
                "prepared_statements_cache_size_mb": 180,
                "slow_query_log_timeout_in_ms": 500
              }
            }`,
		},
		{
			name:             "[4.0.0] file_cache_size_in_mb, row_cache_size_in_mb",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					FileCacheSizeInMb: pointer.Int(500),
					RowCacheSizeInMb:  pointer.Int(100),
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 16,
                "file_cache_size_in_mb": 500,
                "row_cache_size_in_mb": 100
              }
            }`,
		},
		{
			name:             "[3.11.10] thrift_prepared_statements_cache_size_mb",
			cassandraVersion: "3.11.10",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					ThriftPreparedStatementsCacheSizeMb: pointer.Int(1),
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 256,
                "thrift_prepared_statements_cache_size_mb": 1
              }
            }`,
		},
		{
			name:             "[4.0.0] thrift_prepared_statements_cache_size_mb",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					ThriftPreparedStatementsCacheSizeMb: pointer.Int(1),
				},
			},
			want: `{
              "cassandra-yaml": {
				"num_tokens": 16
              }
            }`,
		},
		{
			name:             "[3.11.11] num_tokens",
			cassandraVersion: "3.11.11",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					NumTokens: pointer.Int(32),
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 32
              }
            }`,
		},
		{
			name:             "[4.0.0] num_tokens",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					NumTokens: pointer.Int(32),
				},
			},
			want: `{
              "cassandra-yaml": {
                "num_tokens": 32
              }
            }`,
		},
		{
			name:             "[4.0.0] allocate_tokens_for_local_replication_factor",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					AllocateTokensForLocalReplicationFactor: pointer.Int(5),
				},
			},
			want: `{
              "cassandra-yaml": {
                "allocate_tokens_for_local_replication_factor": 5,
				"num_tokens": 16
              }
            }`,
		},
		{
			name:             "[3.11.11] auth",
			cassandraVersion: "3.11.11",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					Authenticator:                 pointer.String("FakeAuthenticator"),
					Authorizer:                    pointer.String("FakeAuthorizer"),
					RoleManager:                   pointer.String("FakeRoleManager"),
					RolesValidityInMs:             pointer.Int(123),
					RolesUpdateIntervalInMs:       pointer.Int(123),
					PermissionsValidityInMs:       pointer.Int(456),
					PermissionsUpdateIntervalInMs: pointer.Int(456),
					CredentialsValidityInMs:       pointer.Int(789),
					CredentialsUpdateIntervalInMs: pointer.Int(789),
				},
			},
			want: `{
				"cassandra-yaml": {
					"authenticator": "FakeAuthenticator",
					"authorizer": "FakeAuthorizer",
					"role_manager": "FakeRoleManager",
					"roles_validity_in_ms": 123,
					"roles_update_interval_in_ms": 123,
					"permissions_validity_in_ms": 456,
					"permissions_update_interval_in_ms": 456,
					"credentials_validity_in_ms": 789,
					"credentials_update_interval_in_ms": 789,
					"num_tokens": 256
				}
		   }`,
		},
		{
			name:             "[4.0.0] auth",
			cassandraVersion: "4.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					Authenticator:                 pointer.String("FakeAuthenticator"),
					Authorizer:                    pointer.String("FakeAuthorizer"),
					RoleManager:                   pointer.String("FakeRoleManager"),
					RolesValidityInMs:             pointer.Int(123),
					RolesUpdateIntervalInMs:       pointer.Int(123),
					PermissionsValidityInMs:       pointer.Int(456),
					PermissionsUpdateIntervalInMs: pointer.Int(456),
					CredentialsValidityInMs:       pointer.Int(789),
					CredentialsUpdateIntervalInMs: pointer.Int(789),
				},
			},
			want: `{
				"cassandra-yaml": {
					"authenticator": "FakeAuthenticator",
					"authorizer": "FakeAuthorizer",
					"role_manager": "FakeRoleManager",
					"roles_validity_in_ms": 123,
					"roles_update_interval_in_ms": 123,
					"permissions_validity_in_ms": 456,
					"permissions_update_interval_in_ms": 456,
					"credentials_validity_in_ms": 789,
					"credentials_update_interval_in_ms": 789,
					"num_tokens": 16
				}
		   }`,
		},
		{
			name:             "[3.11.11] filters",
			cassandraVersion: "3.11.11",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					AllocateTokensForKeyspace:               pointer.String("FakeAllocateTokensForKeyspace"),
					AllocateTokensForLocalReplicationFactor: pointer.Int(3),
					AuditLoggingOptions:                     &api.AuditLogOptions{},
					AuthReadConsistencyLevel:                pointer.String("ANY"),
					AuthWriteConsistencyLevel:               pointer.String("ANY"),
					Authenticator:                           pointer.String("FakeAuthenticator"),
					Authorizer:                              pointer.String("FakeAuthorizer"),
					AutoHintsCleanupEnabled:                 pointer.Bool(true),
					AutoOptimiseFullRepairStreams:           pointer.Bool(false),
					AutoOptimiseIncRepairStreams:            pointer.Bool(true),
					AutoOptimisePreviewRepairStreams:        pointer.Bool(false),
					AutoSnapshot:                            pointer.Bool(true),
					AutocompactionOnStartupEnabled:          pointer.Bool(false),
					AutomaticSstableUpgrade:                 pointer.Bool(true),
					AvailableProcessors:                     pointer.Int(17),
					BackPressureEnabled:                     pointer.Bool(true),
					BackPressureStrategy: &api.ParameterizedClass{
						ClassName: "FakeBackPressureStrategy",
					},
					BatchSizeFailThresholdInKb:            pointer.Int(20),
					BatchSizeWarnThresholdInKb:            pointer.Int(21),
					BatchlogReplayThrottleInKb:            pointer.Int(22),
					BlockForPeersInRemoteDcs:              pointer.Bool(false),
					BlockForPeersTimeoutInSecs:            pointer.Int(24),
					BufferPoolUseHeapIfExhausted:          pointer.Bool(false),
					CasContentionTimeoutInMs:              pointer.Int(28),
					CdcEnabled:                            pointer.Bool(false),
					CdcFreeSpaceCheckIntervalMs:           pointer.Int(30),
					CdcRawDirectory:                       pointer.String("FakeCdcRawDirectory"),
					CdcTotalSpaceInMb:                     pointer.Int(32),
					CheckForDuplicateRowsDuringCompaction: pointer.Bool(false),
					CheckForDuplicateRowsDuringReads:      pointer.Bool(true),
					ClientErrorReportingExclusions:        &api.SubnetGroups{},
					ColumnIndexCacheSizeInKb:              pointer.Int(38),
					ColumnIndexSizeInKb:                   pointer.Int(39),
					CommitlogCompression: &api.ParameterizedClass{
						ClassName: "FakeCommitlogCompression",
					},
					CommitlogMaxCompressionBuffersInPool:       pointer.Int(43),
					CommitlogPeriodicQueueSize:                 pointer.Int(44),
					CommitlogSegmentSizeInMb:                   pointer.Int(45),
					CommitlogSync:                              pointer.String("periodic"),
					CommitlogSyncPeriodInMs:                    pointer.Int(49),
					CommitlogTotalSpaceInMb:                    pointer.Int(50),
					CompactionLargePartitionWarningThresholdMb: pointer.Int(51),
					CompactionThroughputMbPerSec:               pointer.Int(52),
					CompactionTombstoneWarningThreshold:        pointer.Int(53),
					ConcurrentCompactors:                       pointer.Int(54),
					ConcurrentCounterWrites:                    pointer.Int(55),
					ConcurrentMaterializedViewBuilders:         pointer.Int(56),
					ConcurrentMaterializedViewWrites:           pointer.Int(57),
					ConcurrentReads:                            pointer.Int(58),
					ConcurrentReplicates:                       pointer.Int(59),
					ConcurrentValidations:                      pointer.Int(60),
					ConcurrentWrites:                           pointer.Int(61),
					ConsecutiveMessageErrorsThreshold:          pointer.Int(62),
					CorruptedTombstoneStrategy:                 pointer.String("disabled"),
					CounterCacheKeysToSave:                     pointer.Int(64),
					CounterCacheSavePeriod:                     pointer.Int(65),
					CounterCacheSizeInMb:                       pointer.Int(66),
					CounterWriteRequestTimeoutInMs:             pointer.Int(67),
					CredentialsCacheMaxEntries:                 pointer.Int(68),
					CredentialsUpdateIntervalInMs:              pointer.Int(69),
					CredentialsValidityInMs:                    pointer.Int(70),
					CrossNodeTimeout:                           pointer.Bool(false),
					DefaultKeyspaceRf:                          pointer.Int(73),
					DenylistConsistencyLevel:                   pointer.String("ANY"),
					DenylistInitialLoadRetrySeconds:            pointer.Int(75),
					DenylistMaxKeysPerTable:                    pointer.Int(76),
					DenylistMaxKeysTotal:                       pointer.Int(77),
					DenylistRefreshSeconds:                     pointer.Int(78),
					DiagnosticEventsEnabled:                    pointer.Bool(false),
					DiskAccessMode:                             pointer.String("auto"),
					DiskOptimizationEstimatePercentile:         pointer.String("82.1"),
					DiskOptimizationPageCrossChance:            pointer.String("83.1"),
					DiskOptimizationStrategy:                   pointer.String("ssd"),
					DynamicSnitch:                              pointer.Bool(false),
					DynamicSnitchBadnessThreshold:              pointer.String("86.1"),
					DynamicSnitchResetIntervalInMs:             pointer.Int(87),
					DynamicSnitchUpdateIntervalInMs:            pointer.Int(88),
					EnableDenylistRangeReads:                   pointer.Bool(false),
					EnableDenylistReads:                        pointer.Bool(true),
					EnableDenylistWrites:                       pointer.Bool(false),
					EnableDropCompactStorage:                   pointer.Bool(true),
					EnableMaterializedViews:                    pointer.Bool(false),
					EnablePartitionDenylist:                    pointer.Bool(true),
					EnableSasiIndexes:                          pointer.Bool(false),
					EnableScriptedUserDefinedFunctions:         pointer.Bool(true),
					EnableTransientReplication:                 pointer.Bool(false),
					EnableUserDefinedFunctions:                 pointer.Bool(true),
					EnableUserDefinedFunctionsThreads:          pointer.Bool(false),
					EndpointSnitch:                             pointer.String("FakeEndpointSnitch"),
					FailureDetector:                            pointer.String("FakeFailureDetector"),
					FileCacheEnabled:                           pointer.Bool(false),
					FileCacheRoundUp:                           pointer.Bool(true),
					FileCacheSizeInMb:                          pointer.Int(105),
					FlushCompression:                           pointer.String("none"),
					FullQueryLoggingOptions:                    &api.FullQueryLoggerOptions{},
					GcLogThresholdInMs:                         pointer.Int(108),
					GcWarnThresholdInMs:                        pointer.Int(109),
					HintWindowPersistentEnabled:                pointer.Bool(true),
					HintedHandoffDisabledDatacenters:           &[]string{"dc1"},
					HintedHandoffEnabled:                       pointer.Bool(true),
					HintedHandoffThrottleInKb:                  pointer.Int(113),
					HintsCompression: &api.ParameterizedClass{
						ClassName: "FakeHintsCompression",
					},
					HintsFlushPeriodInMs:                                           pointer.Int(116),
					IdealConsistencyLevel:                                          pointer.String("ANY"),
					IndexInterval:                                                  pointer.Int(119),
					IndexSummaryCapacityInMb:                                       pointer.Int(120),
					IndexSummaryResizeIntervalInMinutes:                            pointer.Int(121),
					InitialRangeTombstoneListAllocationSize:                        pointer.Int(122),
					InterDcStreamThroughputOutboundMegabitsPerSec:                  pointer.Int(124),
					InterDcTcpNodelay:                                              pointer.Bool(false),
					InternodeApplicationReceiveQueueCapacityInBytes:                pointer.Int(126),
					InternodeApplicationReceiveQueueReserveEndpointCapacityInBytes: pointer.Int(127),
					InternodeApplicationReceiveQueueReserveGlobalCapacityInBytes:   pointer.Int(128),
					InternodeApplicationSendQueueCapacityInBytes:                   pointer.Int(129),
					InternodeApplicationSendQueueReserveEndpointCapacityInBytes:    pointer.Int(130),
					InternodeApplicationSendQueueReserveGlobalCapacityInBytes:      pointer.Int(131),
					InternodeAuthenticator:                                         pointer.String("FakeInternodeAuthenticator"),
					InternodeCompression:                                           pointer.String("all"),
					InternodeErrorReportingExclusions:                              &api.SubnetGroups{},
					InternodeMaxMessageSizeInBytes:                                 pointer.Int(135),
					InternodeRecvBuffSizeInBytes:                                   pointer.Int(136),
					InternodeSendBuffSizeInBytes:                                   pointer.Int(137),
					InternodeSocketReceiveBufferSizeInBytes:                        pointer.Int(138),
					InternodeSocketSendBufferSizeInBytes:                           pointer.Int(139),
					InternodeStreamingTcpUserTimeoutInMs:                           pointer.Int(140),
					InternodeTcpConnectTimeoutInMs:                                 pointer.Int(141),
					InternodeTcpUserTimeoutInMs:                                    pointer.Int(142),
					KeyCacheKeysToSave:                                             pointer.Int(143),
					KeyCacheMigrateDuringCompaction:                                pointer.Bool(true),
					KeyCacheSavePeriod:                                             pointer.Int(145),
					KeyCacheSizeInMb:                                               pointer.Int(146),
					KeyspaceCountWarnThreshold:                                     pointer.Int(147),
					MaxConcurrentAutomaticSstableUpgrades:                          pointer.Int(153),
					MaxHintWindowInMs:                                              pointer.Int(154),
					MaxHintsDeliveryThreads:                                        pointer.Int(155),
					MaxHintsFileSizeInMb:                                           pointer.Int(156),
					MaxMutationSizeInKb:                                            pointer.Int(157),
					MaxStreamingRetries:                                            pointer.Int(158),
					MaxValueSizeInMb:                                               pointer.Int(159),
					MemtableAllocationType:                                         pointer.String("unslabbed_heap_buffers"),
					MemtableCleanupThreshold:                                       pointer.String("161.1"),
					MemtableFlushWriters:                                           pointer.Int(162),
					MemtableHeapSpaceInMb:                                          pointer.Int(163),
					MemtableOffheapSpaceInMb:                                       pointer.Int(164),
					MinFreeSpacePerDriveInMb:                                       pointer.Int(165),
					MinimumKeyspaceRf:                                              pointer.Int(166),
					NativeTransportAllowOlderProtocols:                             pointer.Bool(false),
					NativeTransportFlushInBatchesLegacy:                            pointer.Bool(true),
					NativeTransportIdleTimeoutInMs:                                 pointer.Int(169),
					NativeTransportMaxConcurrentConnections:                        pointer.Int(170),
					NativeTransportMaxConcurrentConnectionsPerIp:                   pointer.Int(171),
					NativeTransportMaxConcurrentRequestsInBytes:                    pointer.Int(172),
					NativeTransportMaxConcurrentRequestsInBytesPerIp:               pointer.Int(173),
					NativeTransportMaxFrameSizeInMb:                                pointer.Int(174),
					NativeTransportMaxNegotiableProtocolVersion:                    pointer.Int(175),
					NativeTransportMaxRequestsPerSecond:                            pointer.Int(176),
					NativeTransportMaxThreads:                                      pointer.Int(177),
					NativeTransportRateLimitingEnabled:                             pointer.Bool(true),
					NativeTransportReceiveQueueCapacityInBytes:                     pointer.Int(181),
					NetworkAuthorizer:                                              pointer.String("FakeNetworkAuthorizer"),
					NetworkingCacheSizeInMb:                                        pointer.Int(183),
					NumTokens:                                                      pointer.Int(184),
					OtcBacklogExpirationIntervalMs:                                 pointer.Int(185),
					OtcCoalescingEnoughCoalescedMessages:                           pointer.Int(186),
					OtcCoalescingStrategy:                                          pointer.String("FakeOtcCoalescingStrategy"),
					OtcCoalescingWindowUs:                                          pointer.Int(188),
					PaxosCacheSizeInMb:                                             pointer.Int(190),
					PeriodicCommitlogSyncLagBlockInMs:                              pointer.Int(191),
					PermissionsCacheMaxEntries:                                     pointer.Int(192),
					PermissionsUpdateIntervalInMs:                                  pointer.Int(193),
					PermissionsValidityInMs:                                        pointer.Int(194),
					PhiConvictThreshold:                                            pointer.String("195.1"),
					PreparedStatementsCacheSizeMb:                                  pointer.Int(196),
					RangeRequestTimeoutInMs:                                        pointer.Int(197),
					RangeTombstoneListGrowthFactor:                                 pointer.String("198.1"),
					ReadRequestTimeoutInMs:                                         pointer.Int(199),
					RejectRepairCompactionThreshold:                                pointer.Int(200),
					RepairCommandPoolFullStrategy:                                  pointer.String("queue"),
					RepairCommandPoolSize:                                          pointer.Int(202),
					RepairSessionMaxTreeDepth:                                      pointer.Int(203),
					RepairSessionSpaceInMb:                                         pointer.Int(204),
					RepairedDataTrackingForPartitionReadsEnabled:                   pointer.Bool(false),
					RepairedDataTrackingForRangeReadsEnabled:                       pointer.Bool(true),
					ReplicaFilteringProtection: &api.ReplicaFilteringProtectionOptions{
						CachedRowsWarnThreshold: pointer.Int(100),
						CachedRowsFailThreshold: pointer.Int(200),
					},
					ReportUnconfirmedRepairedDataMismatches: pointer.Bool(true),
					RequestScheduler:                        pointer.String("FakeRequestScheduler"),
					RequestSchedulerId:                      pointer.String("keyspace"),
					RequestSchedulerOptions: &api.RequestSchedulerOptions{
						ThrottleLimit: pointer.Int(100),
						DefaultWeight: pointer.Int(200),
					},
					RequestTimeoutInMs:                     pointer.Int(212),
					RoleManager:                            pointer.String("FakeRoleManager"),
					RolesCacheMaxEntries:                   pointer.Int(214),
					RolesUpdateIntervalInMs:                pointer.Int(215),
					RolesValidityInMs:                      pointer.Int(216),
					RowCacheClassName:                      pointer.String("FakeRowCacheClassName"),
					RowCacheKeysToSave:                     pointer.Int(218),
					RowCacheSavePeriod:                     pointer.Int(219),
					RowCacheSizeInMb:                       pointer.Int(220),
					SlowQueryLogTimeoutInMs:                pointer.Int(235),
					SnapshotBeforeCompaction:               pointer.Bool(true),
					SnapshotLinksPerSecond:                 pointer.Int(237),
					SnapshotOnDuplicateRowDetection:        pointer.Bool(true),
					SnapshotOnRepairedDataMismatch:         pointer.Bool(false),
					SstablePreemptiveOpenIntervalInMb:      pointer.Int(241),
					StreamEntireSstables:                   pointer.Bool(false),
					StreamThroughputOutboundMegabitsPerSec: pointer.Int(246),
					StreamingConnectionsPerHost:            pointer.Int(247),
					StreamingKeepAlivePeriodInSecs:         pointer.Int(248),
					StreamingSocketTimeoutInMs:             pointer.Int(249),
					TableCountWarnThreshold:                pointer.Int(250),
					ThriftFramedTransportSizeInMb:          pointer.Int(251),
					ThriftMaxMessageLengthInMb:             pointer.Int(252),
					ThriftPreparedStatementsCacheSizeMb:    pointer.Int(253),
					TombstoneFailureThreshold:              pointer.Int(254),
					TombstoneWarnThreshold:                 pointer.Int(255),
					TracetypeQueryTtl:                      pointer.Int(256),
					TracetypeRepairTtl:                     pointer.Int(257),
					TrackWarnings: &api.TrackWarnings{
						Enabled: false,
					},
					TraverseAuthFromRoot:                       pointer.Bool(true),
					TrickleFsync:                               pointer.Bool(false),
					TrickleFsyncIntervalInKb:                   pointer.Int(262),
					TruncateRequestTimeoutInMs:                 pointer.Int(263),
					UnloggedBatchAcrossPartitionsWarnThreshold: pointer.Int(264),
					UseDeterministicTableId:                    pointer.Bool(false),
					UseOffheapMerkleTrees:                      pointer.Bool(true),
					UserDefinedFunctionFailTimeout:             pointer.Int(267),
					UserDefinedFunctionWarnTimeout:             pointer.Int(268),
					UserFunctionTimeoutPolicy:                  pointer.String("ignore"),
					ValidationPreviewPurgeHeadStartInSec:       pointer.Int(270),
					WindowsTimerInterval:                       pointer.Int(271),
					WriteRequestTimeoutInMs:                    pointer.Int(272),
				},
			},
			want: `{
				"cassandra-yaml": {
					"allocate_tokens_for_keyspace": "FakeAllocateTokensForKeyspace",
					"authenticator": "FakeAuthenticator",
					"authorizer": "FakeAuthorizer",
					"auto_snapshot": true,
					"back_pressure_enabled": true,
					"back_pressure_strategy": {"class_name": "FakeBackPressureStrategy"},
					"batch_size_fail_threshold_in_kb": 20,
					"batch_size_warn_threshold_in_kb": 21,
					"batchlog_replay_throttle_in_kb": 22,
					"buffer_pool_use_heap_if_exhausted": false,
					"cas_contention_timeout_in_ms": 28,
					"cdc_enabled": false,
					"cdc_free_space_check_interval_ms": 30,
					"cdc_raw_directory": "FakeCdcRawDirectory",
					"cdc_total_space_in_mb": 32,
					"check_for_duplicate_rows_during_compaction": false,
					"check_for_duplicate_rows_during_reads": true,
					"column_index_cache_size_in_kb": 38,
					"column_index_size_in_kb": 39,
					"commitlog_compression": {"class_name": "FakeCommitlogCompression"},
					"commitlog_max_compression_buffers_in_pool": 43,
					"commitlog_periodic_queue_size": 44,
					"commitlog_segment_size_in_mb": 45,
					"commitlog_sync": "periodic",
					"commitlog_sync_period_in_ms": 49,
					"commitlog_total_space_in_mb": 50,
					"compaction_large_partition_warning_threshold_mb": 51,
					"compaction_throughput_mb_per_sec": 52,
					"concurrent_compactors": 54,
					"concurrent_counter_writes": 55,
					"concurrent_materialized_view_writes": 57,
					"concurrent_reads": 58,
					"concurrent_replicates": 59,
					"concurrent_writes": 61,
					"counter_cache_keys_to_save": 64,
					"counter_cache_save_period": 65,
					"counter_cache_size_in_mb": 66,
					"counter_write_request_timeout_in_ms": 67,
					"credentials_cache_max_entries": 68,
					"credentials_update_interval_in_ms": 69,
					"credentials_validity_in_ms": 70,
					"cross_node_timeout": false,
					"disk_access_mode": "auto",
					"disk_optimization_estimate_percentile": "82.1",
					"disk_optimization_page_cross_chance": "83.1",
					"disk_optimization_strategy": "ssd",
					"dynamic_snitch": false,
					"dynamic_snitch_badness_threshold": "86.1",
					"dynamic_snitch_reset_interval_in_ms": 87,
					"dynamic_snitch_update_interval_in_ms": 88,
					"enable_drop_compact_storage": true,
					"enable_materialized_views": false,
					"enable_sasi_indexes": false,
					"enable_scripted_user_defined_functions": true,
					"enable_user_defined_functions": true,
					"enable_user_defined_functions_threads": false,
					"endpoint_snitch": "FakeEndpointSnitch",
					"file_cache_round_up": true,
					"file_cache_size_in_mb": 105,
					"gc_log_threshold_in_ms": 108,
					"gc_warn_threshold_in_ms": 109,
					"hinted_handoff_disabled_datacenters": ["dc1"],
					"hinted_handoff_enabled": true,
					"hinted_handoff_throttle_in_kb": 113,
					"hints_compression": {"class_name": "FakeHintsCompression"},
					"hints_flush_period_in_ms": 116,
					"index_interval": 119,
					"index_summary_capacity_in_mb": 120,
					"index_summary_resize_interval_in_minutes": 121,
					"inter_dc_stream_throughput_outbound_megabits_per_sec": 124,
					"inter_dc_tcp_nodelay": false,
					"internode_authenticator": "FakeInternodeAuthenticator",
					"internode_compression": "all",
					"internode_recv_buff_size_in_bytes": 136,
					"internode_send_buff_size_in_bytes": 137,
					"key_cache_keys_to_save": 143,
					"key_cache_save_period": 145,
					"key_cache_size_in_mb": 146,
					"max_hint_window_in_ms": 154,
					"max_hints_delivery_threads": 155,
					"max_hints_file_size_in_mb": 156,
					"max_mutation_size_in_kb": 157,
					"max_streaming_retries": 158,
					"max_value_size_in_mb": 159,
					"memtable_allocation_type": "unslabbed_heap_buffers",
					"memtable_cleanup_threshold": "161.1",
					"memtable_flush_writers": 162,
					"memtable_heap_space_in_mb": 163,
					"memtable_offheap_space_in_mb": 164,
					"min_free_space_per_drive_in_mb": 165,
					"native_transport_flush_in_batches_legacy": true,
					"native_transport_max_concurrent_connections": 170,
					"native_transport_max_concurrent_connections_per_ip": 171,
					"native_transport_max_concurrent_requests_in_bytes": 172,
					"native_transport_max_concurrent_requests_in_bytes_per_ip": 173,
					"native_transport_max_frame_size_in_mb": 174,
					"native_transport_max_negotiable_protocol_version": 175,
					"native_transport_max_threads": 177,
					"num_tokens": 184,
					"otc_backlog_expiration_interval_ms": 185,
					"otc_coalescing_enough_coalesced_messages": 186,
					"otc_coalescing_strategy": "FakeOtcCoalescingStrategy",
					"otc_coalescing_window_us": 188,
					"permissions_cache_max_entries": 192,
					"permissions_update_interval_in_ms": 193,
					"permissions_validity_in_ms": 194,
					"phi_convict_threshold": "195.1",
					"prepared_statements_cache_size_mb": 196,
					"range_request_timeout_in_ms": 197,
					"read_request_timeout_in_ms": 199,
					"repair_session_max_tree_depth": 203,
					"replica_filtering_protection": {"cached_rows_warn_threshold": 100, "cached_rows_fail_threshold": 200},
					"request_scheduler": "FakeRequestScheduler",
					"request_scheduler_id": "keyspace",
					"request_scheduler_options": {"throttle_limit": 100, "default_weight": 200},
					"request_timeout_in_ms": 212,
					"role_manager": "FakeRoleManager",
					"roles_cache_max_entries": 214,
					"roles_update_interval_in_ms": 215,
					"roles_validity_in_ms": 216,
					"row_cache_class_name": "FakeRowCacheClassName",
					"row_cache_keys_to_save": 218,
					"row_cache_save_period": 219,
					"row_cache_size_in_mb": 220,
					"slow_query_log_timeout_in_ms": 235,
					"snapshot_before_compaction": true,
					"snapshot_on_duplicate_row_detection": true,
					"sstable_preemptive_open_interval_in_mb": 241,
					"stream_throughput_outbound_megabits_per_sec": 246,
					"streaming_keep_alive_period_in_secs": 248,
					"streaming_socket_timeout_in_ms": 249,
					"thrift_framed_transport_size_in_mb": 251,
					"thrift_max_message_length_in_mb": 252,
					"thrift_prepared_statements_cache_size_mb": 253,
					"tombstone_failure_threshold": 254,
					"tombstone_warn_threshold": 255,
					"tracetype_query_ttl": 256,
					"tracetype_repair_ttl": 257,
					"trickle_fsync": false,
					"trickle_fsync_interval_in_kb": 262,
					"truncate_request_timeout_in_ms": 263,
					"unlogged_batch_across_partitions_warn_threshold": 264,
					"user_defined_function_fail_timeout": 267,
					"user_defined_function_warn_timeout": 268,
					"user_function_timeout_policy": "ignore",
					"windows_timer_interval": 271,
					"write_request_timeout_in_ms": 272
				}
		   }`,
		},
		{
			name:             "[4.0.0] filters",
			cassandraVersion: "4.0.0",
			config: api.CassandraConfig{
				CassandraYaml: api.CassandraYaml{
					AllocateTokensForKeyspace:               pointer.String("FakeAllocateTokensForKeyspace"),
					AllocateTokensForLocalReplicationFactor: pointer.Int(3),
					AuditLoggingOptions: &api.AuditLogOptions{
						Enabled: false,
					},
					AuthReadConsistencyLevel:         pointer.String("ANY"),
					AuthWriteConsistencyLevel:        pointer.String("ANY"),
					Authenticator:                    pointer.String("FakeAuthenticator"),
					Authorizer:                       pointer.String("FakeAuthorizer"),
					AutoHintsCleanupEnabled:          pointer.Bool(true),
					AutoOptimiseFullRepairStreams:    pointer.Bool(false),
					AutoOptimiseIncRepairStreams:     pointer.Bool(true),
					AutoOptimisePreviewRepairStreams: pointer.Bool(false),
					AutoSnapshot:                     pointer.Bool(true),
					AutocompactionOnStartupEnabled:   pointer.Bool(false),
					AutomaticSstableUpgrade:          pointer.Bool(true),
					AvailableProcessors:              pointer.Int(17),
					BackPressureEnabled:              pointer.Bool(true),
					BackPressureStrategy: &api.ParameterizedClass{
						ClassName: "FakeBackPressureStrategy",
					},
					BatchSizeFailThresholdInKb:            pointer.Int(20),
					BatchSizeWarnThresholdInKb:            pointer.Int(21),
					BatchlogReplayThrottleInKb:            pointer.Int(22),
					BlockForPeersInRemoteDcs:              pointer.Bool(false),
					BlockForPeersTimeoutInSecs:            pointer.Int(24),
					BufferPoolUseHeapIfExhausted:          pointer.Bool(false),
					CasContentionTimeoutInMs:              pointer.Int(28),
					CdcEnabled:                            pointer.Bool(false),
					CdcFreeSpaceCheckIntervalMs:           pointer.Int(30),
					CdcRawDirectory:                       pointer.String("FakeCdcRawDirectory"),
					CdcTotalSpaceInMb:                     pointer.Int(32),
					CheckForDuplicateRowsDuringCompaction: pointer.Bool(false),
					CheckForDuplicateRowsDuringReads:      pointer.Bool(true),
					ClientErrorReportingExclusions:        &api.SubnetGroups{},
					ColumnIndexCacheSizeInKb:              pointer.Int(38),
					ColumnIndexSizeInKb:                   pointer.Int(39),
					CommitlogCompression: &api.ParameterizedClass{
						ClassName: "FakeCommitlogCompression",
					},
					CommitlogMaxCompressionBuffersInPool:       pointer.Int(43),
					CommitlogPeriodicQueueSize:                 pointer.Int(44),
					CommitlogSegmentSizeInMb:                   pointer.Int(45),
					CommitlogSync:                              pointer.String("periodic"),
					CommitlogSyncPeriodInMs:                    pointer.Int(49),
					CommitlogTotalSpaceInMb:                    pointer.Int(50),
					CompactionLargePartitionWarningThresholdMb: pointer.Int(51),
					CompactionThroughputMbPerSec:               pointer.Int(52),
					CompactionTombstoneWarningThreshold:        pointer.Int(53),
					ConcurrentCompactors:                       pointer.Int(54),
					ConcurrentCounterWrites:                    pointer.Int(55),
					ConcurrentMaterializedViewBuilders:         pointer.Int(56),
					ConcurrentMaterializedViewWrites:           pointer.Int(57),
					ConcurrentReads:                            pointer.Int(58),
					ConcurrentReplicates:                       pointer.Int(59),
					ConcurrentValidations:                      pointer.Int(60),
					ConcurrentWrites:                           pointer.Int(61),
					ConsecutiveMessageErrorsThreshold:          pointer.Int(62),
					CorruptedTombstoneStrategy:                 pointer.String("disabled"),
					CounterCacheKeysToSave:                     pointer.Int(64),
					CounterCacheSavePeriod:                     pointer.Int(65),
					CounterCacheSizeInMb:                       pointer.Int(66),
					CounterWriteRequestTimeoutInMs:             pointer.Int(67),
					CredentialsCacheMaxEntries:                 pointer.Int(68),
					CredentialsUpdateIntervalInMs:              pointer.Int(69),
					CredentialsValidityInMs:                    pointer.Int(70),
					CrossNodeTimeout:                           pointer.Bool(false),
					DefaultKeyspaceRf:                          pointer.Int(73),
					DenylistConsistencyLevel:                   pointer.String("ANY"),
					DenylistInitialLoadRetrySeconds:            pointer.Int(75),
					DenylistMaxKeysPerTable:                    pointer.Int(76),
					DenylistMaxKeysTotal:                       pointer.Int(77),
					DenylistRefreshSeconds:                     pointer.Int(78),
					DiagnosticEventsEnabled:                    pointer.Bool(false),
					DiskAccessMode:                             pointer.String("auto"),
					DiskOptimizationEstimatePercentile:         pointer.String("82.1"),
					DiskOptimizationPageCrossChance:            pointer.String("83.1"),
					DiskOptimizationStrategy:                   pointer.String("ssd"),
					DynamicSnitch:                              pointer.Bool(false),
					DynamicSnitchBadnessThreshold:              pointer.String("86.1"),
					DynamicSnitchResetIntervalInMs:             pointer.Int(87),
					DynamicSnitchUpdateIntervalInMs:            pointer.Int(88),
					EnableDenylistRangeReads:                   pointer.Bool(false),
					EnableDenylistReads:                        pointer.Bool(true),
					EnableDenylistWrites:                       pointer.Bool(false),
					EnableDropCompactStorage:                   pointer.Bool(true),
					EnableMaterializedViews:                    pointer.Bool(false),
					EnablePartitionDenylist:                    pointer.Bool(true),
					EnableSasiIndexes:                          pointer.Bool(false),
					EnableScriptedUserDefinedFunctions:         pointer.Bool(true),
					EnableTransientReplication:                 pointer.Bool(false),
					EnableUserDefinedFunctions:                 pointer.Bool(true),
					EnableUserDefinedFunctionsThreads:          pointer.Bool(false),
					EndpointSnitch:                             pointer.String("FakeEndpointSnitch"),
					FailureDetector:                            pointer.String("FakeFailureDetector"),
					FileCacheEnabled:                           pointer.Bool(false),
					FileCacheRoundUp:                           pointer.Bool(true),
					FileCacheSizeInMb:                          pointer.Int(105),
					FlushCompression:                           pointer.String("none"),
					FullQueryLoggingOptions: &api.FullQueryLoggerOptions{
						LogDir: pointer.String("FakeLogDir"),
						Block:  pointer.Bool(false),
					},
					GcLogThresholdInMs:               pointer.Int(108),
					GcWarnThresholdInMs:              pointer.Int(109),
					HintWindowPersistentEnabled:      pointer.Bool(true),
					HintedHandoffDisabledDatacenters: &[]string{"dc1"},
					HintedHandoffEnabled:             pointer.Bool(true),
					HintedHandoffThrottleInKb:        pointer.Int(113),
					HintsCompression: &api.ParameterizedClass{
						ClassName: "FakeHintsCompression",
					},
					HintsFlushPeriodInMs:                                           pointer.Int(116),
					IdealConsistencyLevel:                                          pointer.String("ANY"),
					IndexInterval:                                                  pointer.Int(119),
					IndexSummaryCapacityInMb:                                       pointer.Int(120),
					IndexSummaryResizeIntervalInMinutes:                            pointer.Int(121),
					InitialRangeTombstoneListAllocationSize:                        pointer.Int(122),
					InterDcStreamThroughputOutboundMegabitsPerSec:                  pointer.Int(124),
					InterDcTcpNodelay:                                              pointer.Bool(false),
					InternodeApplicationReceiveQueueCapacityInBytes:                pointer.Int(126),
					InternodeApplicationReceiveQueueReserveEndpointCapacityInBytes: pointer.Int(127),
					InternodeApplicationReceiveQueueReserveGlobalCapacityInBytes:   pointer.Int(128),
					InternodeApplicationSendQueueCapacityInBytes:                   pointer.Int(129),
					InternodeApplicationSendQueueReserveEndpointCapacityInBytes:    pointer.Int(130),
					InternodeApplicationSendQueueReserveGlobalCapacityInBytes:      pointer.Int(131),
					InternodeAuthenticator:                                         pointer.String("FakeInternodeAuthenticator"),
					InternodeCompression:                                           pointer.String("all"),
					InternodeErrorReportingExclusions:                              &api.SubnetGroups{},
					InternodeMaxMessageSizeInBytes:                                 pointer.Int(135),
					InternodeRecvBuffSizeInBytes:                                   pointer.Int(136),
					InternodeSendBuffSizeInBytes:                                   pointer.Int(137),
					InternodeSocketReceiveBufferSizeInBytes:                        pointer.Int(138),
					InternodeSocketSendBufferSizeInBytes:                           pointer.Int(139),
					InternodeStreamingTcpUserTimeoutInMs:                           pointer.Int(140),
					InternodeTcpConnectTimeoutInMs:                                 pointer.Int(141),
					InternodeTcpUserTimeoutInMs:                                    pointer.Int(142),
					KeyCacheKeysToSave:                                             pointer.Int(143),
					KeyCacheMigrateDuringCompaction:                                pointer.Bool(true),
					KeyCacheSavePeriod:                                             pointer.Int(145),
					KeyCacheSizeInMb:                                               pointer.Int(146),
					KeyspaceCountWarnThreshold:                                     pointer.Int(147),
					MaxConcurrentAutomaticSstableUpgrades:                          pointer.Int(153),
					MaxHintWindowInMs:                                              pointer.Int(154),
					MaxHintsDeliveryThreads:                                        pointer.Int(155),
					MaxHintsFileSizeInMb:                                           pointer.Int(156),
					MaxMutationSizeInKb:                                            pointer.Int(157),
					MaxStreamingRetries:                                            pointer.Int(158),
					MaxValueSizeInMb:                                               pointer.Int(159),
					MemtableAllocationType:                                         pointer.String("unslabbed_heap_buffers"),
					MemtableCleanupThreshold:                                       pointer.String("161.1"),
					MemtableFlushWriters:                                           pointer.Int(162),
					MemtableHeapSpaceInMb:                                          pointer.Int(163),
					MemtableOffheapSpaceInMb:                                       pointer.Int(164),
					MinFreeSpacePerDriveInMb:                                       pointer.Int(165),
					MinimumKeyspaceRf:                                              pointer.Int(166),
					NativeTransportAllowOlderProtocols:                             pointer.Bool(false),
					NativeTransportFlushInBatchesLegacy:                            pointer.Bool(true),
					NativeTransportIdleTimeoutInMs:                                 pointer.Int(169),
					NativeTransportMaxConcurrentConnections:                        pointer.Int(170),
					NativeTransportMaxConcurrentConnectionsPerIp:                   pointer.Int(171),
					NativeTransportMaxConcurrentRequestsInBytes:                    pointer.Int(172),
					NativeTransportMaxConcurrentRequestsInBytesPerIp:               pointer.Int(173),
					NativeTransportMaxFrameSizeInMb:                                pointer.Int(174),
					NativeTransportMaxNegotiableProtocolVersion:                    pointer.Int(175),
					NativeTransportMaxRequestsPerSecond:                            pointer.Int(176),
					NativeTransportMaxThreads:                                      pointer.Int(177),
					NativeTransportRateLimitingEnabled:                             pointer.Bool(true),
					NativeTransportReceiveQueueCapacityInBytes:                     pointer.Int(181),
					NetworkAuthorizer:                                              pointer.String("FakeNetworkAuthorizer"),
					NetworkingCacheSizeInMb:                                        pointer.Int(183),
					NumTokens:                                                      pointer.Int(184),
					OtcBacklogExpirationIntervalMs:                                 pointer.Int(185),
					OtcCoalescingEnoughCoalescedMessages:                           pointer.Int(186),
					OtcCoalescingStrategy:                                          pointer.String("FakeOtcCoalescingStrategy"),
					OtcCoalescingWindowUs:                                          pointer.Int(188),
					PaxosCacheSizeInMb:                                             pointer.Int(190),
					PeriodicCommitlogSyncLagBlockInMs:                              pointer.Int(191),
					PermissionsCacheMaxEntries:                                     pointer.Int(192),
					PermissionsUpdateIntervalInMs:                                  pointer.Int(193),
					PermissionsValidityInMs:                                        pointer.Int(194),
					PhiConvictThreshold:                                            pointer.String("195.1"),
					PreparedStatementsCacheSizeMb:                                  pointer.Int(196),
					RangeRequestTimeoutInMs:                                        pointer.Int(197),
					RangeTombstoneListGrowthFactor:                                 pointer.String("198.1"),
					ReadRequestTimeoutInMs:                                         pointer.Int(199),
					RejectRepairCompactionThreshold:                                pointer.Int(200),
					RepairCommandPoolFullStrategy:                                  pointer.String("queue"),
					RepairCommandPoolSize:                                          pointer.Int(202),
					RepairSessionMaxTreeDepth:                                      pointer.Int(203),
					RepairSessionSpaceInMb:                                         pointer.Int(204),
					RepairedDataTrackingForPartitionReadsEnabled:                   pointer.Bool(false),
					RepairedDataTrackingForRangeReadsEnabled:                       pointer.Bool(true),
					ReplicaFilteringProtection: &api.ReplicaFilteringProtectionOptions{
						CachedRowsWarnThreshold: pointer.Int(100),
						CachedRowsFailThreshold: pointer.Int(200),
					},
					ReportUnconfirmedRepairedDataMismatches: pointer.Bool(true),
					RequestScheduler:                        pointer.String("FakeRequestScheduler"),
					RequestSchedulerId:                      pointer.String("keyspace"),
					RequestSchedulerOptions: &api.RequestSchedulerOptions{
						ThrottleLimit: pointer.Int(100),
						DefaultWeight: pointer.Int(200),
					},
					RequestTimeoutInMs:                     pointer.Int(212),
					RoleManager:                            pointer.String("FakeRoleManager"),
					RolesCacheMaxEntries:                   pointer.Int(214),
					RolesUpdateIntervalInMs:                pointer.Int(215),
					RolesValidityInMs:                      pointer.Int(216),
					RowCacheClassName:                      pointer.String("FakeRowCacheClassName"),
					RowCacheKeysToSave:                     pointer.Int(218),
					RowCacheSavePeriod:                     pointer.Int(219),
					RowCacheSizeInMb:                       pointer.Int(220),
					SlowQueryLogTimeoutInMs:                pointer.Int(235),
					SnapshotBeforeCompaction:               pointer.Bool(true),
					SnapshotLinksPerSecond:                 pointer.Int(237),
					SnapshotOnDuplicateRowDetection:        pointer.Bool(true),
					SnapshotOnRepairedDataMismatch:         pointer.Bool(false),
					SstablePreemptiveOpenIntervalInMb:      pointer.Int(241),
					StreamEntireSstables:                   pointer.Bool(false),
					StreamThroughputOutboundMegabitsPerSec: pointer.Int(246),
					StreamingConnectionsPerHost:            pointer.Int(247),
					StreamingKeepAlivePeriodInSecs:         pointer.Int(248),
					StreamingSocketTimeoutInMs:             pointer.Int(249),
					TableCountWarnThreshold:                pointer.Int(250),
					ThriftFramedTransportSizeInMb:          pointer.Int(251),
					ThriftMaxMessageLengthInMb:             pointer.Int(252),
					ThriftPreparedStatementsCacheSizeMb:    pointer.Int(253),
					TombstoneFailureThreshold:              pointer.Int(254),
					TombstoneWarnThreshold:                 pointer.Int(255),
					TracetypeQueryTtl:                      pointer.Int(256),
					TracetypeRepairTtl:                     pointer.Int(257),
					TrackWarnings: &api.TrackWarnings{
						Enabled: false,
					},
					TraverseAuthFromRoot:                       pointer.Bool(true),
					TrickleFsync:                               pointer.Bool(false),
					TrickleFsyncIntervalInKb:                   pointer.Int(262),
					TruncateRequestTimeoutInMs:                 pointer.Int(263),
					UnloggedBatchAcrossPartitionsWarnThreshold: pointer.Int(264),
					UseDeterministicTableId:                    pointer.Bool(false),
					UseOffheapMerkleTrees:                      pointer.Bool(true),
					UserDefinedFunctionFailTimeout:             pointer.Int(267),
					UserDefinedFunctionWarnTimeout:             pointer.Int(268),
					UserFunctionTimeoutPolicy:                  pointer.String("ignore"),
					ValidationPreviewPurgeHeadStartInSec:       pointer.Int(270),
					WindowsTimerInterval:                       pointer.Int(271),
					WriteRequestTimeoutInMs:                    pointer.Int(272),
				},
			},
			want: `{
				"cassandra-yaml": {
					"allocate_tokens_for_keyspace": "FakeAllocateTokensForKeyspace",
					"allocate_tokens_for_local_replication_factor": 3,
					"audit_logging_options": {"enabled": false},
					"authenticator": "FakeAuthenticator",
					"authorizer": "FakeAuthorizer",
					"auto_optimise_full_repair_streams": false,
					"auto_optimise_inc_repair_streams": true,
					"auto_optimise_preview_repair_streams": false,
					"auto_snapshot": true,
					"autocompaction_on_startup_enabled": false,
					"automatic_sstable_upgrade": true,
					"back_pressure_enabled": true,
					"back_pressure_strategy": {"class_name": "FakeBackPressureStrategy"},
					"batch_size_fail_threshold_in_kb": 20,
					"batch_size_warn_threshold_in_kb": 21,
					"batchlog_replay_throttle_in_kb": 22,
					"block_for_peers_in_remote_dcs": false,
					"block_for_peers_timeout_in_secs": 24,
					"buffer_pool_use_heap_if_exhausted": false,
					"cas_contention_timeout_in_ms": 28,
					"cdc_enabled": false,
					"cdc_free_space_check_interval_ms": 30,
					"cdc_raw_directory": "FakeCdcRawDirectory",
					"cdc_total_space_in_mb": 32,
					"check_for_duplicate_rows_during_compaction": false,
					"check_for_duplicate_rows_during_reads": true,
					"column_index_cache_size_in_kb": 38,
					"column_index_size_in_kb": 39,
					"commitlog_compression": {"class_name": "FakeCommitlogCompression"},
					"commitlog_max_compression_buffers_in_pool": 43,
					"commitlog_periodic_queue_size": 44,
					"commitlog_segment_size_in_mb": 45,
					"commitlog_sync": "periodic",
					"commitlog_sync_period_in_ms": 49,
					"commitlog_total_space_in_mb": 50,
					"compaction_large_partition_warning_threshold_mb": 51,
					"compaction_throughput_mb_per_sec": 52,
					"concurrent_compactors": 54,
					"concurrent_counter_writes": 55,
					"concurrent_materialized_view_builders": 56,
					"concurrent_materialized_view_writes": 57,
					"concurrent_reads": 58,
					"concurrent_replicates": 59,
					"concurrent_validations": 60,
					"concurrent_writes": 61,
					"consecutive_message_errors_threshold": 62,
					"corrupted_tombstone_strategy": "disabled",
					"counter_cache_keys_to_save": 64,
					"counter_cache_save_period": 65,
					"counter_cache_size_in_mb": 66,
					"counter_write_request_timeout_in_ms": 67,
					"credentials_cache_max_entries": 68,
					"credentials_update_interval_in_ms": 69,
					"credentials_validity_in_ms": 70,
					"cross_node_timeout": false,
					"diagnostic_events_enabled": false,
					"disk_access_mode": "auto",
					"disk_optimization_estimate_percentile": "82.1",
					"disk_optimization_page_cross_chance": "83.1",
					"disk_optimization_strategy": "ssd",
					"dynamic_snitch": false,
					"dynamic_snitch_badness_threshold": "86.1",
					"dynamic_snitch_reset_interval_in_ms": 87,
					"dynamic_snitch_update_interval_in_ms": 88,
					"enable_drop_compact_storage": true,
					"enable_materialized_views": false,
					"enable_sasi_indexes": false,
					"enable_scripted_user_defined_functions": true,
					"enable_transient_replication": false,
					"enable_user_defined_functions": true,
					"enable_user_defined_functions_threads": false,
					"endpoint_snitch": "FakeEndpointSnitch",
					"file_cache_enabled": false,
					"file_cache_round_up": true,
					"file_cache_size_in_mb": 105,
					"flush_compression": "none",
					"full_query_logging_options": {
						"log_dir": "FakeLogDir",
						"block": false
					},
					"gc_log_threshold_in_ms": 108,
					"gc_warn_threshold_in_ms": 109,
					"hinted_handoff_disabled_datacenters": ["dc1"],
					"hinted_handoff_enabled": true,
					"hinted_handoff_throttle_in_kb": 113,
					"hints_compression": {"class_name": "FakeHintsCompression"},
					"hints_flush_period_in_ms": 116,
					"ideal_consistency_level": "ANY",
					"index_summary_capacity_in_mb": 120,
					"index_summary_resize_interval_in_minutes": 121,
					"initial_range_tombstone_list_allocation_size": 122,
					"inter_dc_stream_throughput_outbound_megabits_per_sec": 124,
					"inter_dc_tcp_nodelay": false,
					"internode_application_receive_queue_capacity_in_bytes": 126,
					"internode_application_receive_queue_reserve_endpoint_capacity_in_bytes": 127,
					"internode_application_receive_queue_reserve_global_capacity_in_bytes": 128,
					"internode_application_send_queue_capacity_in_bytes": 129,
					"internode_application_send_queue_reserve_endpoint_capacity_in_bytes": 130,
					"internode_application_send_queue_reserve_global_capacity_in_bytes": 131,
					"internode_authenticator": "FakeInternodeAuthenticator",
					"internode_compression": "all",
					"internode_max_message_size_in_bytes": 135,
					"internode_socket_receive_buffer_size_in_bytes": 138,
					"internode_socket_send_buffer_size_in_bytes": 139,
					"internode_streaming_tcp_user_timeout_in_ms": 140,
					"internode_tcp_connect_timeout_in_ms": 141,
					"internode_tcp_user_timeout_in_ms": 142,
					"key_cache_keys_to_save": 143,
					"key_cache_migrate_during_compaction": true,
					"key_cache_save_period": 145,
					"key_cache_size_in_mb": 146,
					"keyspace_count_warn_threshold": 147,
					"max_concurrent_automatic_sstable_upgrades": 153,
					"max_hint_window_in_ms": 154,
					"max_hints_delivery_threads": 155,
					"max_hints_file_size_in_mb": 156,
					"max_mutation_size_in_kb": 157,
					"max_streaming_retries": 158,
					"max_value_size_in_mb": 159,
					"memtable_allocation_type": "unslabbed_heap_buffers",
					"memtable_cleanup_threshold": "161.1",
					"memtable_flush_writers": 162,
					"memtable_heap_space_in_mb": 163,
					"memtable_offheap_space_in_mb": 164,
					"min_free_space_per_drive_in_mb": 165,
					"native_transport_allow_older_protocols": false,
					"native_transport_flush_in_batches_legacy": true,
					"native_transport_idle_timeout_in_ms": 169,
					"native_transport_max_concurrent_connections": 170,
					"native_transport_max_concurrent_connections_per_ip": 171,
					"native_transport_max_concurrent_requests_in_bytes": 172,
					"native_transport_max_concurrent_requests_in_bytes_per_ip": 173,
					"native_transport_max_frame_size_in_mb": 174,
					"native_transport_max_negotiable_protocol_version": 175,
					"native_transport_max_threads": 177,
					"native_transport_receive_queue_capacity_in_bytes": 181,
					"network_authorizer": "FakeNetworkAuthorizer",
					"networking_cache_size_in_mb": 183,
					"num_tokens": 184,
					"otc_coalescing_enough_coalesced_messages": 186,
					"otc_coalescing_strategy": "FakeOtcCoalescingStrategy",
					"otc_coalescing_window_us": 188,
					"periodic_commitlog_sync_lag_block_in_ms": 191,
					"permissions_cache_max_entries": 192,
					"permissions_update_interval_in_ms": 193,
					"permissions_validity_in_ms": 194,
					"phi_convict_threshold": "195.1",
					"prepared_statements_cache_size_mb": 196,
					"range_request_timeout_in_ms": 197,
					"range_tombstone_list_growth_factor": "198.1",
					"read_request_timeout_in_ms": 199,
					"reject_repair_compaction_threshold": 200,
					"repair_command_pool_full_strategy": "queue",
					"repair_command_pool_size": 202,
					"repair_session_max_tree_depth": 203,
					"repair_session_space_in_mb": 204,
					"repaired_data_tracking_for_partition_reads_enabled": false,
					"repaired_data_tracking_for_range_reads_enabled": true,
					"replica_filtering_protection": {"cached_rows_warn_threshold": 100, "cached_rows_fail_threshold": 200},
					"report_unconfirmed_repaired_data_mismatches": true,
					"request_timeout_in_ms": 212,
					"role_manager": "FakeRoleManager",
					"roles_cache_max_entries": 214,
					"roles_update_interval_in_ms": 215,
					"roles_validity_in_ms": 216,
					"row_cache_class_name": "FakeRowCacheClassName",
					"row_cache_keys_to_save": 218,
					"row_cache_save_period": 219,
					"row_cache_size_in_mb": 220,
					"slow_query_log_timeout_in_ms": 235,
					"snapshot_before_compaction": true,
					"snapshot_links_per_second": 237,
					"snapshot_on_duplicate_row_detection": true,
					"snapshot_on_repaired_data_mismatch": false,
					"sstable_preemptive_open_interval_in_mb": 241,
					"stream_entire_sstables": false,
					"stream_throughput_outbound_megabits_per_sec": 246,
					"streaming_connections_per_host": 247,
					"streaming_keep_alive_period_in_secs": 248,
					"table_count_warn_threshold": 250,
					"tombstone_failure_threshold": 254,
					"tombstone_warn_threshold": 255,
					"tracetype_query_ttl": 256,
					"tracetype_repair_ttl": 257,
					"trickle_fsync": false,
					"trickle_fsync_interval_in_kb": 262,
					"truncate_request_timeout_in_ms": 263,
					"unlogged_batch_across_partitions_warn_threshold": 264,
					"use_offheap_merkle_trees": true,
					"user_defined_function_fail_timeout": 267,
					"user_defined_function_warn_timeout": 268,
					"user_function_timeout_policy": "ignore",
					"validation_preview_purge_head_start_in_sec": 270,
					"windows_timer_interval": 271,
					"write_request_timeout_in_ms": 272
				}
		   }`,
		},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			var err error
			tc.got, err = CreateJsonConfig(tc.config, tc.cassandraVersion)
			require.NoError(t, err, "failed to create json dcConfig")
			expected, err := gabs.ParseJSON([]byte(tc.want))
			require.NoError(t, err, "failed to parse expected value")
			actual, err := gabs.ParseJSON(tc.got)
			require.NoError(t, err, "failed to parse actual value")
			assert.Equal(t, expected, actual)
		})
	}

}

func parseResource(quantity string) *resource.Quantity {
	parsed := resource.MustParse(quantity)
	return &parsed
}
