name: K8ssandra Operator Helm Release

on:
  workflow_call:
    inputs:
      helm_repo:
        description: 'Helm repository to use'
        default: 'next'
        required: false
        type: string

jobs:
  helm-release:
    runs-on: ubuntu-latest
    needs: release_k8ssandra_operator

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Update PATH
        run: |
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

      - name: Create env variables
        run: ./.github/scripts/env_variables.sh

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install and validate tool versions
        run: |
          scripts/install-yq.sh ${{ env.YQ_VERSION }}
          helm version
          yq -V

      - name: Update chart dependencies
        run: |
          scripts/update-helm-deps.sh

      - name: Compute release chart version
        id: compute_next_version
        run: |
          DATE_TIME=$(date '+%Y%m%d%H%M%S')
          RELEASE_VERSION=$(echo $(yq e '.version' charts/k8ssandra-operator/Chart.yaml) | sed "s/-.*/-${DATE_TIME}-${GITHUB_SHA::8}/")
          echo "Release version is: $RELEASE_VERSION"
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT

      - name: Update Helm chart version
        run: |
          yq eval ".version |= \"${RELEASE_VERSION}\"" charts/k8ssandra-operator/Chart.yaml -i
          cat charts/k8ssandra-operator/Chart.yaml

      - name: Create working directory and copy charts
        run: |
          mkdir -p build/$RELEASE_VERSION
          cp -rv charts/* build/$RELEASE_VERSION/k8ssandra-operator

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-integ-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-integ-

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Generate package archives
        run: |
          ls | while read c; do
            if [[ -d $c ]]; then
              helm package $c
            fi
          done
        working-directory: build/${{ steps.compute_next_version.outputs.RELEASE_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Helm Release
      - uses: google-github-actions/setup-gcloud@v1
        with:
          version: '318.0.0'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Download current index from Google Cloud
        env:
          GCP_HELM_BUCKET_NAME: ${{ secrets.GCP_HELM_BUCKET_NAME }}
        run: |
          echo "Downloading index.yaml from gs://$GCP_HELM_BUCKET_NAME/${{ inputs.helm_repo }}/index.yaml"
          gsutil cp gs://$GCP_HELM_BUCKET_NAME/${{ inputs.helm_repo }}/index.yaml ./
        working-directory: build/${{ steps.compute_next_version.outputs.RELEASE_VERSION }}

      - name: Regenerate Helm index
        env:
          GCP_HELM_BUCKET_NAME: ${{ secrets.GCP_HELM_BUCKET_NAME }}
        run: |
          echo "Generating Helm index for gs://$GCP_HELM_BUCKET_NAME/${{ inputs.helm_repo }}/index.yaml"
          helm repo index . --merge index.yaml --url "https://$GCP_HELM_BUCKET_NAME/${{ inputs.helm_repo }}/"
        working-directory: build/${{ steps.compute_next_version.outputs.RELEASE_VERSION }}

      - name: Upload packages and index
        env:
          GCP_HELM_BUCKET_NAME: ${{ secrets.GCP_HELM_BUCKET_NAME }}
        run: |
          gsutil cp ./*.tgz gs://$GCP_HELM_BUCKET_NAME/${{ inputs.helm_repo }}/
          gsutil cp ./index.yaml gs://$GCP_HELM_BUCKET_NAME/${{ inputs.helm_repo }}/
        working-directory: build/${{ steps.compute_next_version.outputs.RELEASE_VERSION }}
